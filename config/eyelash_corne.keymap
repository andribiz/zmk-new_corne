#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

#define KEYS_L 0  1  2  3  4  5 13 14 15 16 17 18 28 29 30 31 32 33
#define KEYS_R 7  8  9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41
#define KEYS_T 42 43 44 45 46 47 48

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&lt {
    flavor = "balanced";
};

&mt {
    // Deactivate shift on press of next key instead of on release
    // to prevent capitalization of multiple characters when rolling
    // keys (such as `ST`).
    flavor = "hold-preferred";
};
/*
 * Sticky Key Settings
 */
&sk {
    // Deactivate shift on press of next key instead of on release
    // to prevent capitalization of multiple characters when rolling
    // keys (such as `ST`).
    quick-release;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
 combos {
        compatible = "zmk,combos";

        parentheses_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        parentheses_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <23 24>;
            layers = <0>;
        };

        bracket_left {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
            layers = <0>;
        };

        bracket_right {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
            layers = <0>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <31 32>;
            layers = <0>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <37 38>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <2 3>;
            layers = <0>;
        };

        bigger_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <9 10>;
            layers = <0>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <32 37>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <4 8>;
            layers = <0>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <17 23>;
            layers = <0>;
        };

        astrsk {
            bindings = <&kp ASTERISK>;
            key-positions = <3 9>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 24>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <31 38>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <18 22>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <33 36>;
            layers = <0>;
        };

        /* nav01 { */
        /*    bindings = <&kp N1>; */
        /*    key-positions = <1 2>; */
        /*    layers = <1>; */
        /* } */
        /**/
        /* nav02 { */
        /*    bindings = <&kp N2>; */
        /*    key-positions = <2 3>; */
        /*    layers = <1>; */
        /* } */
        /**/
        /* nav03 { */
        /*    bindings = <&kp N3>; */
        /*    key-positions = <3 4>; */
        /*    layers = <1>; */
        /* } */
        /**/
        /* nav04 { */
        /*    bindings = <&kp N4>; */
        /*    key-positions = <4 5>; */
        /*    layers = <1>; */
        /* } */
    };

    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "layer/alt Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&mo 2>, <&kp LALT>;
        };
       // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        /*
         * Shifted Backspace deletes
         *
         * Usage: &mm_bspc_del
         * Tap: Backspace
         * Shift-Tap: Delete
         */
        mm_bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /*
         * Sticky shift + Caps Word
         *
         * Usage: &mm_shift_caps_word_l or &mm_shift_caps_word_r
         * Tap: Sticky shift
         * HMR-Shift-Tap: Caps Word
         * Double Tap: Caps Word
         *   - The first tap activates sticky shift mod
         *   - The second tap is now a shift + press, which activates
         *     the mod morph
         * Hold: Shift
         *
         * Credits to urob for this genius combo.
         */
        mm_shift_caps_word_l: mm_shift_caps_word_l {
            compatible = "zmk,behavior-mod-morph";
            label = "mm_shift_caps_word_l";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

   macros {
        scrcp: scrcp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTL &kp LGUI>
                , <&macro_tap &kp N4>
                , <&macro_release &kp LSHFT &kp LCTL &kp LGUI>
                ;
        };
        lck: lck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTL &kp LGUI>
                , <&macro_tap &kp Q>
                , <&macro_release  &kp LCTL &kp LGUI>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp GRAVE             &kp Q         &kp W            &kp E          &kp R  &kp T                            &kp UP               &kp Y    &kp U  &kp I        &kp O         &kp P            &mm_bspc_del
&kp TAB               &hm_l LALT A  &hm_l LCTRL S    &hm_l LGUI D   &kp F  &kp G                  &kp LEFT  &kp LCLK  &kp RIGHT  &kp H    &kp J  &hm_r RGUI K &hm_r RCTRL L &hm_r RALT SEMI  &kp SQT
&mm_shift_caps_word_l &kp Z         &kp X            &kp C          &kp V  &kp B     &kp C_PP               &kp DOWN             &kp N    &kp M  &kp COMMA    &kp DOT       &kp FSLH         &scrcp
                       &kp LGUI    &lt 1 ESC  &mt LSHIFT ENTER                                                                      &mt LC(LA(LGUI)) SPACE  &mo 2  &kp RCTRL
            >;

             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans    &kp N1       &kp N2         &kp N3       &kp N4     &kp N5                                   &mmv MOVE_UP                  &kp N6    &kp N7     &kp N8    &kp N9    &kp N0    &trans
&trans    &kp EQUAL    &kp UNDERSCORE &kp MINUS    &kp PLUS   &kp AMPS                 &mmv MOVE_LEFT  &mkp LCLK     &mmv MOVE_RIGHT &kp LBKT  &kp RBKT   &kp LPAR  &kp RPAR  &kp STAR  &trans
&trans    &kp AT_SIGN  &kp DOLLAR     &kp PERCENT  &kp EXCL   &kp HASH     &kp C_MUTE                  &mmv MOVE_DOWN                &kp PIPE  &kp CARET  &kp LBRC  &kp RBRC  &kp BSLH  &trans
                                    &trans       &trans     &trans                                                              &trans  &trans     &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "NAV";
            bindings = <
&lck      &kp LG(N1)      &kp LG(N2)      &kp LG(N3)      &kp LG(N4)  &kp LG(N5)                               &mmv MOVE_UP                     &kp LG(N6)       &kp LG(N7)       &kp LG(N8)       &kp LG(N9)   &kp HOME &trans
&trans    &kp LC(N1)      &kp LC(N2)      &kp LC(N3)      &kp LC(N4)  &kp LC(N5)                     &mmv MOVE_LEFT  &mkp LCLK &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT    &kp END  &kp F12
&trans    &kp F1          &kp F2          &kp F3          &kp F4      &kp F5   &kp C_MUTE                      &mmv MOVE_DOWN                   &kp F6           &kp F7           &kp F8           &kp F9       &kp F10  &kp F11
                                    &kp LCTRL     &trans     &trans                                                                             &trans    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&trans  &rgb_ug RGB_OFF &rgb_ug RGB_ON  &rgb_ug RGB_EFF &trans      &trans                                 &mmv MOVE_UP                     &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD &studio_unlock   &sys_reset
&trans  &kp HOME        &kp PG_UP       &kp PG_DN       &kp END     &trans                 &mmv MOVE_LEFT  &mkp LCLK    &mmv MOVE_RIGHT     &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3    &bt BT_SEL 4     &trans
&trans  &kp C_NEXT      &kp C_VOL_UP    &kp C_VOL_DN    &kp C_MUTE  &trans      &trans                     &mmv MOVE_DOWN                   &out OUT_USB     &out OUT_BLE     &bootloader      &sys_reset      &kp SCROLLLOCK   &bt BT_CLR_ALL
                                    &trans       &trans     &trans                                                                                  &trans      &trans     &trans


            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
